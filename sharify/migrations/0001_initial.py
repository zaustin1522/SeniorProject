# Generated by Django 3.2.15 on 2022-11-03 22:53

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Musicdata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('track_id', models.TextField()),
                ('track_name', models.TextField()),
                ('track_artist', models.TextField()),
                ('track_popularity', models.FloatField()),
                ('track_album_id', models.TextField()),
                ('track_album_name', models.TextField()),
                ('track_album_release_date', models.IntegerField()),
                ('playlist_name', models.TextField()),
                ('playlist_id', models.TextField()),
                ('playlist_genre', models.TextField()),
                ('playlist_subgenre', models.TextField()),
                ('danceability', models.FloatField()),
                ('energy', models.FloatField()),
                ('key', models.FloatField()),
                ('loudness', models.FloatField()),
                ('mode', models.FloatField()),
                ('speechiness', models.FloatField()),
                ('acousticness', models.FloatField()),
                ('instrumentalness', models.FloatField()),
                ('liveness', models.FloatField()),
                ('valence', models.FloatField()),
                ('tempo', models.FloatField()),
                ('duration_ms', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='UserToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_token', models.TextField(blank=True, null=True)),
                ('token_type', models.TextField(default='Bearer')),
                ('expires_in', models.IntegerField(default=0)),
                ('state', models.TextField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('playlist_id', models.CharField(max_length=120, primary_key=True, serialize=False)),
                ('playlist_spotify_id', models.CharField(default='null', max_length=120)),
                ('playlist_name', models.TextField(max_length=100)),
                ('playlist_url', models.CharField(max_length=1000)),
                ('playlist_num_tracks', models.IntegerField(null=True)),
                ('playlist_featured', models.BooleanField(default=False)),
                ('playlist_genre', models.CharField(max_length=100)),
                ('playlist_owner', models.CharField(max_length=500)),
                ('date_created', models.CharField(default='No date', max_length=500)),
                ('playlist_img', models.ImageField(blank=True, default='', upload_to='')),
                ('songs', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sharify.musicdata')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_dob', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('user_bio', models.TextField(blank=True, default='')),
                ('user_avatar', models.ImageField(blank=True, default='', upload_to='')),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('user_is_paired', models.BooleanField(default=False)),
                ('user_spotify_id', models.CharField(blank=True, max_length=50, null=True)),
                ('user_spotify_fav_artist', models.CharField(blank=True, max_length=50, null=True)),
                ('user_spotify_friends', models.TextField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
                ('user_token', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sharify.usertoken')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
