# Generated by Django 3.2.15 on 2022-12-15 20:33

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import sharify.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('dob', models.DateTimeField(blank=True, null=True)),
                ('bio', models.TextField(default='')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('friends', models.JSONField(default=list)),
                ('pending', models.JSONField(default=sharify.models.User.pending_default)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Musicdata',
            fields=[
                ('track_id', models.TextField(primary_key=True, serialize=False)),
                ('track_name', models.TextField()),
                ('artist', models.TextField()),
                ('popularity', models.FloatField()),
                ('album_id', models.TextField()),
                ('album_name', models.TextField()),
                ('album_release_date', models.IntegerField()),
                ('duration_ms', models.IntegerField()),
                ('album_liason', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('artist', 'album_name', 'track_name'),
            },
        ),
        migrations.CreateModel(
            name='SpotifyProfile',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('display_name', models.TextField(default='')),
                ('spotify_id', models.TextField(default='')),
                ('follower_total', models.IntegerField(default=0)),
                ('api_access', models.TextField(default='')),
                ('avatar_url', models.TextField(default='')),
                ('token_info', models.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(max_length=100)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('spotify_id', models.TextField(blank=True, null=True)),
                ('songs', models.ManyToManyField(to='sharify.Musicdata')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('posted_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('on_type', models.TextField(default='track')),
                ('comment', models.TextField(default='')),
                ('comment_on', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='sharify.musicdata')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('comment_on', '-posted_at'),
            },
        ),
        migrations.AddField(
            model_name='user',
            name='profile',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sharify.spotifyprofile'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
